name: Deploy to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: "22"
  PNPM_VERSION: "10"

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm run build

      - name: Setup SSH directory
        run: |
          mkdir -p $HOME/.ssh

      - name: Setup SSH for local testing (ACT)
        if: env.ACT == 'true'
        run: |
          echo "üß™ Setting up fake SSH for local testing with act"
          cat > $HOME/.ssh/deploy_key << 'EOF'
          -----BEGIN OPENSSH PRIVATE KEY-----
          fake-key-for-local-testing
          -----END OPENSSH PRIVATE KEY-----
          EOF
          echo "‚úÖ Fake SSH key created for local testing"

      - name: Add SSH key
        if: env.ACT != 'true'   # real runners only
        run: |
          # Check if the secret exists and has content
          if [ -z "${{ secrets.DEPLOY_SSH_KEY }}" ]; then
            echo "‚ùå DEPLOY_SSH_KEY secret is empty or not set"
            exit 1
          fi

          # Clean and prepare the SSH key(new)
          echo "${{ secrets.DEPLOY_SSH_KEY }}" | tr -d '\r' | sed '/^$/d' > $HOME/.ssh/deploy_key

          # Validate file was created and has content
          if [ ! -s $HOME/.ssh/deploy_key ]; then
            echo "‚ùå SSH key file is empty after processing"
            exit 1
          fi

          # Check file size (SSH keys should be substantial)
          KEY_SIZE=$(wc -c < $HOME/.ssh/deploy_key)
          if [ "$KEY_SIZE" -lt 100 ]; then
            echo "‚ùå SSH key file is too small ($KEY_SIZE bytes). Expected at least 100 bytes."
            echo "This suggests the secret content is invalid or truncated."
            exit 1
          fi

          # Ensure the key has proper SSH key format
          if ! grep -q "BEGIN.*PRIVATE KEY" $HOME/.ssh/deploy_key; then
            echo "‚ùå SSH key does not contain valid header (BEGIN PRIVATE KEY)"
            echo "File appears to contain: $(head -c 50 $HOME/.ssh/deploy_key | tr '\n' ' ')..."
            exit 1
          fi

          if ! grep -q "END.*PRIVATE KEY" $HOME/.ssh/deploy_key; then
            echo "‚ùå SSH key does not contain valid footer (END PRIVATE KEY)"
            exit 1
          fi

          echo "‚úÖ SSH key secret validation passed"

      - name: Configure SSH key permissions and setup agent
        if: env.ACT != 'true'   # Skip SSH agent setup in ACT mode
        run: |
          chmod 600 $HOME/.ssh/deploy_key

          # Validate SSH key format with detailed error output
          if ! ssh-keygen -l -f $HOME/.ssh/deploy_key 2>&1; then
            echo "‚ùå SSH key validation failed"
            echo "Key file contents (first/last lines for debugging):"
            head -2 $HOME/.ssh/deploy_key
            echo "..."
            tail -2 $HOME/.ssh/deploy_key
            exit 1
          fi

          # Setup SSH agent and export environment variables
          eval "$(ssh-agent -s)"
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV
          echo "SSH_AGENT_PID=$SSH_AGENT_PID" >> $GITHUB_ENV
          ssh-add $HOME/.ssh/deploy_key

          echo "‚úÖ SSH key validated and added to agent successfully"

      - name: Setup SSH permissions for local testing (ACT)
        if: env.ACT == 'true'
        run: |
          echo "üß™ Setting up SSH permissions for local testing"
          chmod 600 $HOME/.ssh/deploy_key
          echo "‚úÖ SSH permissions configured for local testing"

      - name: Verify ssh-agent has key
        if: env.DEBUG_SSH == 'true' && env.ACT != 'true'
        run: |
          echo "üîç Verifying SSH agent has loaded the key..."
          ssh-add -l || (echo "‚ùå No keys found in ssh-agent" && exit 1)
          echo "‚úÖ SSH agent verification completed"

      - name: Verify fake SSH key for local testing
        if: env.DEBUG_SSH == 'true' && env.ACT == 'true'
        run: |
          echo "üß™ LOCAL TESTING - Verifying fake SSH key"
          if [ -f $HOME/.ssh/deploy_key ]; then
            echo "‚úÖ SSH key file exists at $HOME/.ssh/deploy_key"
            echo "‚úÖ Key permissions: $(ls -la $HOME/.ssh/deploy_key | awk '{print $1}')"
            echo "üìã Simulating 'ssh-add -l' output:"
            echo "2048 SHA256:fake-fingerprint-for-local-testing fake-key-for-local-testing (ED25519)"
          else
            echo "‚ùå SSH key file not found"
            exit 1
          fi

      - name: Configure SSH client
        if: env.ACT != 'true'
        run: |
          mkdir -p ~/.ssh
          cat >> ~/.ssh/config << EOF
          Host ${{ secrets.VPS_HOST }}
            HostName ${{ secrets.VPS_HOST }}
            User ${{ secrets.VPS_USER }}
            IdentityFile $HOME/.ssh/deploy_key
            IdentitiesOnly yes
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            ServerAliveInterval 60
            ServerAliveCountMax 3
            ConnectTimeout 30
            TCPKeepAlive yes
            Compression yes
          EOF
          chmod 600 ~/.ssh/config
          echo "‚úÖ SSH client configuration completed"

      - name: Add VPS to known hosts and test connection
        if: env.ACT != 'true'
        run: |
          # Add host to known hosts
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || echo "Warning: Could not add host key, using StrictHostKeyChecking=no"
          
          # Test SSH connection
          echo "üîç Testing SSH connection..."
          if ssh -o BatchMode=yes -o ConnectTimeout=30 ${{ secrets.VPS_HOST }} 'echo "‚úÖ SSH connection successful"'; then
            echo "‚úÖ SSH connection test passed"
          else
            echo "‚ùå SSH connection test failed"
            echo "üîç Debugging SSH connection..."
            ssh -vvv -o BatchMode=yes -o ConnectTimeout=30 ${{ secrets.VPS_HOST }} 'echo "Connection test"' 2>&1 || true
            exit 1
          fi

      - name: Mock deployment steps for local testing
        if: env.ACT == 'true'
        run: |
          echo "üß™ LOCAL TESTING MODE - Simulating deployment steps"
          echo "‚úÖ Would create backup on VPS"
          echo "‚úÖ Would sync files to VPS"
          echo "‚úÖ Would install dependencies on VPS"
          echo "‚úÖ Would run database migrations"
          echo "‚úÖ Would restart application"
          echo "‚úÖ Would run health check"
          echo "üéâ Local testing simulation completed successfully!"

      - name: Create backup on VPS
        if: env.ACT != 'true'
        run: |
          ssh ${{ secrets.VPS_HOST }} "
            if [ -d '${{ secrets.DEPLOY_PATH }}' ]; then
              cd ${{ secrets.DEPLOY_PATH }}/.. &&
              cp -r '${{ secrets.DEPLOY_PATH }}' backup-$(date +%Y%m%d-%H%M%S) || echo 'Backup failed, continuing...'
            else
              echo 'No existing deployment directory to backup'
            fi
          "

      - name: Deploy to VPS
        if: env.ACT != 'true'
        run: |
          ssh ${{ secrets.VPS_HOST }} "mkdir -p ${{ secrets.DEPLOY_PATH }}"
          ssh ${{ secrets.VPS_HOST }} "pm2 stop api.oluwasetemi.dev || true"
          rsync -avz --delete --exclude node_modules --exclude .git --exclude .github --exclude .env --exclude .env.* --exclude '*.log' --exclude '.next' --exclude 'dist' --exclude 'coverage' --exclude '.nyc_output' ./ ${{ secrets.VPS_HOST }}:${{ secrets.DEPLOY_PATH }}/
          ssh ${{ secrets.VPS_HOST }} "cd ${{ secrets.DEPLOY_PATH }} && pnpm install --prod --frozen-lockfile"
          ssh ${{ secrets.VPS_HOST }} "cd ${{ secrets.DEPLOY_PATH }} && (pnpm run db:migrate && pnpm run db:generate) || echo 'No database operations needed'"
          ssh ${{ secrets.VPS_HOST }} "cd ${{ secrets.DEPLOY_PATH }} && pm2 start ecosystem.config.cjs || pm2 restart api.oluwasetemi.dev"
          ssh ${{ secrets.VPS_HOST }} "pm2 save"

      - name: Health Check with Retry
        if: env.ACT != 'true'
        run: |
          echo "Waiting for application to start..."
          sleep 30
          for i in {1..5}; do
            if curl -f --connect-timeout 10 --max-time 30 ${{ secrets.APP_URL }}/health; then
              echo "‚úÖ Deployment successful!"
              exit 0
            else
              echo "Health check attempt $i failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
          echo "‚ùå Health check failed after 5 attempts"
          exit 1

      - name: Rollback on Failure
        if: failure() && env.ACT != 'true'
        run: |
          echo "üîÑ Rolling back due to deployment failure..."
          ssh ${{ secrets.VPS_HOST }} "
            cd ${{ secrets.DEPLOY_PATH }}/.. &&
            LATEST_BACKUP=\$(ls -t backup-* 2>/dev/null | head -n1) &&
            if [ -n \"\$LATEST_BACKUP\" ]; then
              rm -rf ${{ secrets.DEPLOY_PATH }} &&
              mv \"\$LATEST_BACKUP\" ${{ secrets.DEPLOY_PATH }} &&
              cd ${{ secrets.DEPLOY_PATH }} &&
              pm2 restart api.oluwasetemi.dev &&
              echo 'Rollback completed'
            else
              echo 'No backup found for rollback'
            fi
          "

      - name: Cleanup old backups
        if: success() && env.ACT != 'true'
        run: |
          ssh ${{ secrets.VPS_HOST }} "
            cd ${{ secrets.DEPLOY_PATH }}/.. &&
            ls -t backup-* 2>/dev/null | tail -n +4 | xargs rm -rf || echo 'No old backups to clean'
          "
